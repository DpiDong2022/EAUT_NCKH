@using EAUT_NCKH.Web.Enums
@model TopicIndexViewPage
@{
    ViewData["Title"] = "Quản lý Đề tài";
    var index = Model.Pagination.GetStartRow();
    int startYear = 2008;
    int endYear = DateTime.Now.Year;
    var roleId = ViewBag.roleId;
}

<div class="p-3 h-100 overflow-auto">
    <div class="bg-white rounded-4 p-3 shadow-sm">
        <div class="d-flex justify-content-between align-items-end flex-nowrap">
            <h5 class="text-uppercase mb-0">Quản lý Đề tài</h5>
            <div class="d-flex gap-3 flex-nowrap">
            </div>
        </div>
        <hr />
        <form id="datatable_form" asp-action="Index" method="post" class="d-flex flex-column align-items-between flex-nowrap gap-3">
            @Html.AntiForgeryToken()

            <div class="page_filter d-flex justify-content-between align-items-end flex-nowrap gap-3">
                <div class="d-flex gap-3 flex-nowrap">
                    <select style="width: 200px!important; min-width: 200px!important;" class="form-select rounded-pill" name="DepartmentId">
                        <option value="-1">-------- Chọn Khoa</option>
                        @foreach (var depart in Model.Departments) {
                            if (depart.Id == Model.DepartmentId) {
                                <option value="@depart.Id" selected>@depart.Name</option>
                            } else {
                                <option value="@depart.Id">@depart.Name</option>
                            }
                        }
                    </select>
                    <select class="form-select rounded-pill text-center" name="Year">
                        <option class="text-center" value="-1">-------- Năm</option>
                        @for (int i = endYear; i >= startYear; i--) {
                            if (i == Model.Year) {
                                <option selected class="text-center" value="@i">@i</option>
                            } else {
                                <option class="text-center" value="@i">@i</option>
                            }
                        }
                    </select>
                    <input type="text" class="search" data-bs-toggle="tooltip" title="Tìm kiếm bằng tên đề tài" autocomplete="off" autofocus value="@Model.Search" name="Search" placeholder="Nhập từ khóa tìm kiếm ..." />
                    <button type="submit" class="btn_primary text-nowrap">
                        <img src="/icons/search_white_icon.png" width="18" />
                        Tìm kiếm
                    </button>
                </div>
                <div class="d-flex gap-3 flex-nowrap">
                    @if (roleId == (int)RoleEnumId.RESEARCH_ADVISOR) {
                        <button data-bs-toggle="modal" data-bs-target="#topic_index_modal" id="btn_add" type="button" class="btn_primary text-nowrap">
                            Đăng ký Đề tài</button>
                    }
                </div>
            </div>

            <div class="page_filter d-flex justify-content-between align-items-end flex-nowrap gap-3 mb-4">
                <div class="d-flex gap-3 flex-nowrap">
                    <select style="width: 250px!important; min-width: 250px!important;" class="form-select rounded-pill" name="StatusId">
                        <option value="-1">-------- Trạng thái Đề tài</option>
                        @foreach (var topicStatus in Model.TopicStatuses) {
                            if (topicStatus.Id == Model.Status) {
                                <option value="@topicStatus.Id" selected>@topicStatus.Name</option>
                            } else {
                                <option value="@topicStatus.Id">@topicStatus.Name</option>
                            }
                        }
                    </select>
                </div>
                @if ((roleId == (int)RoleEnumId.SCIENTIFIC_RESEARCH_OFFICE) || (roleId == (int)RoleEnumId.DEPARTMENT_SCIENTIFIC_RESEARCH_TEAM)) {
                    <div class="d-flex gap-3 flex-nowrap">
                        <button id="btn_export" type="button" class="btn_primary text-nowrap">
                            <img src="/icons/export_white_icon.png" width="14" />
                            Xuất danh sách đề tài
                        </button>
                    </div>
                }
            </div>

            <div class="page_length d-flex justify-content-between align-items-end flex-nowrap gap-3">
                <select class="form-select rounded-pill page_len_select" name="PageLength">
                    @if (Model.Pagination.PageLength == 10) {
                        <option value="10" selected>--- Chiều dài bảng</option>
                        <option value="10" selected>10</option>
                    } else {
                        <option value="10">10</option>
                    }
                    @if (Model.Pagination.PageLength == 20) {
                        <option value="20" selected>20</option>
                    } else {
                        <option value="20">20</option>
                    }
                    @if (Model.Pagination.PageLength == 50) {
                        <option value="50" selected>50</option>
                    } else {
                        <option value="50">50</option>
                    }
                    @if (Model.Pagination.PageLength == Model.Pagination.TotalRow) {
                        <option value="@Model.Pagination.TotalRow" selected>Tất cả</option>
                    } else {
                        <option value="@Model.Pagination.TotalRow">Tất cả</option>
                    }
                </select>
                <p class="me-auto mt-auto mb-0 text-success">Kết quả tìm kiếm: @Model.Pagination.TotalRow</p>
            </div>

            <table id="mainTable" class="table table-hover table-responsive table-borderless mb-0">
                <thead>
                    <tr class="align-middle">
                        <th>#</th>
                        <th>Tên Đề tài</th>
                        <th>Giảng viên đăng ký</th>
                        <th>Ngày đăng ký</th>
                        <th class="text-center">Trạng thái</th>
                        <th class="text-center">Điểm</th>
                        <th width="350">Ghi chú</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var topic in Model.DataList) {
                        <tr role="button" class="align-bottom" data-content="@topic.EncyptedID">
                            <td>
                                @(++index)
                            </td>
                            <td width="360" class="p-2 title">
                                <a class="link" asp-controller="Topic" asp-action="Detail" asp-route-target="@topic.EncyptedID" data-bs-toggle="tooltip" title="Xem chi tiết">@topic.Title</a>
                            </td>
                            <td width="230" class="p-2 teachername">@topic.CreatedbyNavigation.Fullname</td>
                            <td width="110"class="p-2">@(topic.Createddate.ToString("dd/MM/yyyy"))</td>
                            <td class="p-2 text-center">@topic.StatusNavigation.Name</td>
                            <td class="p-2 text-center">@topic.Defenseassignments?.FirstOrDefault()?.Finalscore</td>
                            <td data-bs-toggle="tooltip" title="@(topic.Note?.Length > 40 ? @topic.Note : "")" class="p-2 note">@(topic.Note?.Length > 40 ? @topic.Note.Substring(0, 40) + "..." : @topic.Note)</td>
                            <td class="text-end ">
                                @if (topic.Editabled) {
                                    <div class="d-flex align-items-center justify-content-end gap-2 flex-nowrap">
                                        <button tooltip="Xóa thông tin đề tài" type="button" class="p-0 delete_btn">
                                            <img src="/images/error.png" height="40" />
                                        </button>
                                        <button tooltip="Cập nhật thông tin" type="button" class="p-0 edit_btn">
                                            <img src="/images/edit.png" height="40" />
                                        </button>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <partial name="_Pagination" model="Model.Pagination" />
        </form>
    </div>
</div>

<div class="modal fade no_reset" id="topic_index_modal" tabindex="-1" aria-labelledby="">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
        <div class="modal-content rounded-5 h-100">
            <div class="modal-header">
                <h4 class="modal-title" id="">Đăng ký đề tài</h4>
            </div>
            <div class="modal-body">
                <form id="main_form" class="d-flex flex-column gap-3">
                    @Html.AntiForgeryToken()
                    <input type="text" name="Id" value="0" hidden />
                    <div class="form-group mb-0">
                        <label class="required">Tên đề tài</label>
                        <input type="text" name="Title" autocomplete="on" placeholder="Nhập tên đề tài" />
                    </div>
                    <div class="form-group mb-0">
                        <label class="required">Mô tả</label>
                        <input type="text" name="Note" autocomplete="on" placeholder="Nhập mô tả (nếu có)" />
                    </div>
                    <div class="row">
                        <div class="col col-12 col-lg-6">
                            <div class="form-group">
                                <label>Tìm kiếm Giảng viên hướng dẫn thứ 2</label>
                                <input type="text" name="secondTeacherSearch" autocomplete="on" placeholder="Nhập email hoặc số điện thoại ..." />
                                <input type="number" name="SecondTeacherId" hidden />
                                <span class="error"></span>
                            </div>
                        </div>
                        <div class="col col-12 col-lg-6 form-group">
                            <label>Giảng viên hướng dẫn thứ 2</label>
                            <input disabled type="text" name="teacherName" data-content placeholder="Tên giảng viên" />
                        </div>
                    </div>
                    <hr class="m-0"/>
                    <h5 class="mt-auto">Bảng nhóm sinh viên</h5>
                    <table id="student_list" class="">
                        <thead>
                            <tr>
                                <th class="p-2" width="100">Mã sinh viên</th>
                                <th class="p-2" width="180">Họ và tên</th>
                                <th class="p-2">Số điện thoại</th>
                                <th class="p-2" width="250">Email</th>
                                <th class="p-2">Vai trò</th>
                                <th class="p-2">Tên lớp</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                    <label class="error col col-12 text-center" for="student-table" id="student-table-error"></label>
                    <hr class="m-0 mb-3" />
                </form>
                <form id="addStudentForm">
                    <div class="row">
                        <div class="form-group col col-12 col-lg-3">
                            <input class="number" type="text" placeholder="Nhập mã sinh viên" name="StudentCode" />
                            <label class="error" for="StudentCode" style="display: none;" id="StudentCode-error"></label>
                        </div>
                        <div class="form-group col col-12 col-lg-3">
                            <input type="text" class="only_string not_change" placeholder="Nhập Họ và tên" name="Fullname" />
                        </div>
                        <div class="form-group col col-12 col-lg-3">
                            <input type="text" placeholder="Nhập email" name="Email" />
                        </div>
                        <div class="form-group col col-12 col-lg-3">
                            <input class="number" type="text" placeholder="Nhập số điện thoại" name="PhoneNumber" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col col-12 col-lg-4">
                            <select class="form-select not_change" name="TrainingProgramId">
                                <option value="-1">---- Chọn Trương trình giảng dạy</option>
                                @foreach (var tp in Model.Trainingprograms) {
                                    <option value="@tp.Id" data-code="@tp.Code">@tp.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col col-12 col-lg-4">
                            <select class="form-select not_change" name="DepartmentId">
                                <option value="-1">---- Chọn Khoa / Viện</option>
                                @foreach (var depart in Model.Departments) {
                                    <option selected value="@depart.Id">@depart.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col col-12 col-lg-4">
                            <select class="form-select pe-5 not_change" name="MajorId">
                                <option value="-1">---- Chọn Chuyên ngành</option>
                                @foreach (var major in Model.Majors) {
                                    if (major.Departmentid == Model.DepartmentId || Model.DepartmentId == -1) {
                                        <option data-departId="@major.Departmentid" value="@major.Id" data-code="@major.Code">@major.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col col-12 col-lg-6">
                            <select class="form-select" name="role">
                                <option value="-1">----- Chọn Vai trò</option>
                                <option value="0">Thành viên</option>
                                <option value="1">Trưởng nhóm</option>
                            </select>
                            <label class="error" for="role" style="display: none;" id="role-error"></label>
                        </div>
                        <div class="form-group col col-12 col-lg-6">
                            <input class="not_change" type="text" placeholder="Nhập tên lớp" name="ClassName" />
                        </div>
                        <label class="error col col-12 text-center" for="all" style="display: none;" id="all-error"></label>
                    </div>
                    <div class="d-flex justify-content-start gap-3 mt-2">
                        <button type="button" class="close_btn new">Làm mới</button>
                        <button type="button" class="btn_primary add">Thêm</button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="save_btn">Đăng ký</button>
                <button type="button" class="close_btn" data-bs-dismiss="modal">Hủy</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script type="text/javascript">
        const text = {
            accountModalId: "account_index_modal",
            departInputContainerId: "department_container",
            majorInputContainerId: "major_container",
            academicTitleInputContainerId: "academicTitle_container",
            studentCodeInputContainerId: "studentCode_container",
            classNameInputContainerId: "className_container",
            programInputContainerId: "program_container"

        };

        const MainForm = $("#main_form");
        const StudentForm = $("#addStudentForm");

        StudentForm.find(".close_btn.new").click(function() {
            StudentForm[0].reset();
            StudentForm.validate().resetForm();
        })

        MainForm.find("input[name='secondTeacherSearch']").on("blur", function() {
            if (!this.value) {
                MainForm.find("input[name='teacherName']").val("");
                $(this).closest(".form-group").find(".error").text("");
                return;
            }
            FindSecondTeacher(this)
        })

        MainForm.on("click", ".delete_btn", function() {
            $(this).closest("tr").remove();
        })


        StudentForm.find("select[name='DepartmentId']").change(function () {
            const select = $(this);
            const selectValue = select.val();
            const majorSelect = StudentForm.find("select[name='MajorId']");
            majorSelect.val(-1);
            RendClassName()

            if (selectValue == -1) {
                return;
            }
            majorSelect.find("option[value!='-1']").each(function () {
                const option = $(this);
                if (option.data("departid") == selectValue) {
                    option.removeClass("d-none");
                }
                else {
                    option.addClass("d-none");
                }
            })
        })

        StudentForm.find("select[name='MajorId']").change(RendClassName)
        StudentForm.find("select[name='TrainingProgramId']").change(RendClassName)

        function RendClassName(){
            const trainingProgram = StudentForm.find("select[name='TrainingProgramId']");
            const major = StudentForm.find("select[name='MajorId']");
            const className = StudentForm.find("input[name='ClassName']");

            className.val("");
            let name = "";
            if (trainingProgram.val() != -1) {
                const trainingProgramCode = trainingProgram.find("option:selected").data("code");
                name += trainingProgramCode + ".";
            }

            if (major.val() != -1) {
                const majorCode = major.find("option:selected").data("code");
                name += majorCode + ".";
            }

            className.val(name)
        }

        StudentForm.find("input[name='StudentCode']").on("blur", function() {
            if(!this.value){
                StudentForm[0].reset();
                StudentForm.validate().resetForm();
                StudentForm.find("input.not_change").prop("readonly", false);
                StudentForm.find("select.not_change").prop("disabled", false);
                return;
            }

            if($("#student_list input[name$='.StudentCode']").val()==this.value){
                $("#StudentCode-error").text("Đã tồn tại sinh viên trên bảng nhóm sinh viên").css("display", "block");
                return;
            }
            $("#StudentCode-error").css("display", "none");
            FindStudent(this)
        });

        function FindSecondTeacher(input) {
            $("#page-loader").css("display", "flex");
            $.ajax({
                url: '@Url.Action("FindSecondTeacher", "Topic")',
                type: 'GET',
                data: {
                    email: input.value
                }
            }).then((response) => {
                console.log(response);
                $("#page-loader").css("display", "none");
                if(response.code == 1){
                    $(input).closest(".form-group").find(".error").text(response.message);
                    MainForm.find("input[name='SecondTeacherId']").val(0);
                }
                else{
                    $(input).closest(".form-group").find(".error").text("");
                    MainForm.find("input[name='teacherName']").val(response.data.fullname);
                    MainForm.find("input[name='SecondTeacherId']").val(response.data.id);
                }
            }).
            catch((Error) => {
                    $("#page-loader").css("display", "none");
                    console.log(Error);
            })
        }

        function FindStudent(input) {
            $("#page-loader").css("display", "flex");
            $.ajax({
                url: '@Url.Action("FindStudent", "Topic")',
                type: 'POST',
                data: {
                    studentCode: input.value
                }
            }).then((response) => {
                console.log(response);
                $("#page-loader").css("display", "none");
                if (response.code == 0) {
                    FillStudentForm(response.data);
                    StudentForm.valid();
                    StudentForm.find("input.not_change").prop("readonly", true);
                    StudentForm.find("select.not_change").prop("disabled", true);
                }
                else{
                    StudentForm.find("input.not_change").prop("readonly", false);
                    StudentForm.find("select.not_change").prop("disabled", false);
                    if(response.code == 2){
                        $("#StudentCode-error").css("display", "none");
                        return;
                    }
                    StudentForm.find("input[name='StudentCode']").val("");
                    $("#StudentCode-error").text(response.message).css("display", "block");
                }
            }).
                catch((Error) => {
                    $("#page-loader").css("display", "none");
                    console.log(Error);
                })
        }

        function FillStudentForm(data) {
            StudentForm.find("input[name='Fullname']").val(data.fullname);
            StudentForm.find("input[name='Email']").val(data.email);
            StudentForm.find("input[name='PhoneNumber']").val(data.phonenumber);
            StudentForm.find("select[name='TrainingProgramId']").val(data.trainingprogramid);
            StudentForm.find("select[name='DepartmentId']").val(data.departmentid);
            StudentForm.find("select[name='MajorId']").val(data.majorid);
            StudentForm.find("input[name='ClassName']").val(data.classname);
        }

        StudentFormValidate()
        function StudentFormValidate(){
            StudentForm.validate({
                rules: {
                    StudentCode:{
                        required: true,
                        max: 2000000000
                    },
                    Fullname:{
                        required: true,
                        maxlength: 100
                    },
                    Email:{
                        required: true,
                        email: true,
                        maxlength: 120
                    },
                    PhoneNumber: {
                        required: true,
                        vietNamPhone: true
                    },
                    TrainingProgramId:{
                        min: 1
                    },
                    DepartmentId: {
                        min: 1
                    },
                    MajorId:{
                        min: 1
                    },
                    role:{
                        min: 0
                    },
                    ClassName:{
                        required: true,
                        maxlength: 50,
                    }
                },
                messages: {
                    StudentCode: {
                        required: "Vui lòng nhập mã sinh viên",
                        max: "Mã sinh viên không được quá dài"
                    },
                    Fullname: {
                        required: "Vui lòng nhập họ tên",
                        maxlength: "Họ tên quá dài"
                    },
                    Email: {
                        required: "Vui lòng nhập email",
                        email: "Email không hợp lệ",
                        maxlength: "Email quá dài"
                    },
                    PhoneNumber: {
                        required: "Vui lòng nhập số điện thoại"
                    },
                    TrainingProgramId: {
                        min: "Vui lòng chọn chương trình đào tạo"
                    },
                    DepartmentId: {
                        min: "Vui lòng chọn khoa"
                    },
                    MajorId: {
                        min: "Vui lòng chọn ngành học"
                    },
                    role: {
                        min: "Vui lòng chọn vai trò"
                    },
                    ClassName: {
                        required: "Vui lòng nhập tên lớp",
                        maxlength: "Tên lớp quá dài"
                    }
                }
            })
        }

        StudentForm.find(".btn_primary.add").click(function() {
            if (!StudentForm.valid()) {
                return;
            }

            if($("#student_list tbody tr").length == 5){
                StudentForm.find("label#all-error").text("Đã đủ số lượng sinh viên").css("display", "block");
                return;
            }

            let isDuplicate = false;
            const currentVal = StudentForm.find("input[name='StudentCode']").val();
            $("#student_list").find("input[name$='.StudentCode']").each(function() {
                if($(this).val()==currentVal){
                    $("#StudentCode-error").text("Đã tồn tại sinh viên trên bảng nhóm sinh viên").css("display", "block");
                    isDuplicate = true;
                    return false;
                }
            });

            if (isDuplicate) {
                return; // End the whole click handler function
            }

            const inputRole = StudentForm.find("select[name='role']");

            if(inputRole.val()==0 && $("#student_list tbody tr").length == 4 && !IsExistOfLeaderInTeam()){
                StudentForm.find("label#all-error").text("chưa có trưởng nhóm").css("display", "block");
                return;
            }

            if(inputRole.val()==1 && IsExistOfLeaderInTeam()){
                StudentForm.find("label#role-error").text("Đã tồn tại trưởng nhóm").css("display", "block");
                return;
            }

            StudentForm.find(".error").css("display", "none");

            AddNewStudentToTable();
        });

        function IsExistOfLeaderInTeam(){
            return $("#student_list").find("input[name$='.RoleId']").filter(function(){
                return this.value == "1";
            }).length > 0;
        }

        ValidateTopicForm();
        function ValidateTopicForm (){
            MainForm.validate({
                rules: {
                    Title:{
                        required: true,
                        maxlength: 255 
                    },
                    Note:{
                        maxlength: 600
                    }
                },
                messages: {
                    Title: {
                        required: "Tên đề tài là trường bắt buộc",
                        maxlength: "Chiều dài tối đa của tên đề tài là 255 kí tự" 
                    },
                    Note: {
                        maxlength: "Chiều dài tối đa của mô tả là 600 kí tự" 
                    }
                }
            })
        }

        function CheckRegisterNewTopic (){
            if(!MainForm.valid()){
                return;
            }
            if ($("#student_list tbody tr").length<1) {
                $("#student-table-error").text("Số lượng thành viên trong nhóm phải có ít nhất 1 thành viên và 1 trưởng nhóm").css("display", "block");
                return;
            }
            $("#student-table-error").css("display", "none");
            if (!IsExistOfLeaderInTeam()) {
                $("#student-table-error").text("Chưa có trưởng nhóm").css("display", "block");
                return;
            }
            $("#student-table-error").css("display", "none");

            SubmitNewTopic();
        }

        function GetStudentList (){
            let students = [];
            $("#student_list tbody tr").each(function() {
                const row = $(this);
                const student = {
                    id: 0,
                    studentCode: row.find("input[name*='.StudentCode']").val(),
                    fullName: row.find("input[name*='.FullName']").val(),
                    phoneNumber: row.find("input[name*='.PhoneNumber']").val(),
                    email: row.find("input[name*='.Email']").val(),
                    roleId: row.find("input[name*='.RoleId']").val(),
                    className: row.find("input[name*='.ClassName']").val(),
                    trainingProgramId: row.find("input[name*='.TrainingProgramId']").val(),
                    departmentId: row.find("input[name*='.DepartmentId']").val(),
                    majorId: row.find("input[name*='.MajorId']").val()
                };
                students.push(student);
            });
            return students;
        }

        function SubmitNewTopic() {
            const studentList = GetStudentList();
            const ID = MainForm.find("input[name='Id']").val();
            const Title = MainForm.find("input[name='Title']").val();
            const Note = MainForm.find("input[name='Note']").val();
            const topic = {
                id: ID,
                title: Title,
                note: Note,
                secondTeacherId: MainForm.find("input[name='SecondTeacherId']").val() || 0,
                students: studentList
            };
            $("#page-loader").css("display", "flex");
            $.ajax({
                url: '@Url.Action("RegisterNewTopic", "Topic")',
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(topic)
            }).then((response) => {
                $("#page-loader").css("display", "none");

                if(response.code == 0){
                    $(".modal#success_modal").find("#message").text(response.message);
                    $(".modal#success_modal").modal("show");
                    debugger;
                    if (ID != "0") {
                        $("#mainTable tbody tr").each(function(){
                            const row = $(this);
                            if(row.data("content") != ID){
                                return;
                            }
                            row.find(".title a").text(Title);
                            row.find(".note").text(Note.length > 40 ? (Note.substring(0, 40) + "...") : Note)
                                .attr("data-bs-original-title", Note.length > 40 ? Note : "");
                            return false;
                        })
                    }
                    else{
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                }
                else{
                    $(".modal#error_modal").find("#message").text(response.message);
                    $(".modal#error_modal").modal("show");
                }
            }).catch((errors) => {
                $("#page-loader").css("display", "none");
            })
        }

        $("#topic_index_modal .save_btn").click(function(){
            CheckRegisterNewTopic();
        });

        function AddNewStudentToTable(){
            const table = MainForm.find("#student_list");
            const studentCode = StudentForm.find("input[name='StudentCode']");
            const fullname = StudentForm.find("input[name='Fullname']");
            const email = StudentForm.find("input[name='Email']");
            const phonenumber = StudentForm.find("input[name='PhoneNumber']");
            const classname  = StudentForm.find("input[name='ClassName']");
            const role = StudentForm.find("select[name='role']");
            const roleText = role.find("option:selected").text();
            const trainingProgram = StudentForm.find("select[name='TrainingProgramId']");
            const department = StudentForm.find("select[name='DepartmentId']");
            const major = StudentForm.find("select[name='MajorId']");

            const newRow = GetStudentMemberHtml(studentCode.val(), fullname.val(), phonenumber.val(), email.val(),
                role.val(), roleText, classname.val(), trainingProgram.val(), department.val(), major.val());

            table.find("tbody").append(newRow);

            studentCode.val("");
            fullname.val("");
            email.val("");
            phonenumber.val("");
             StudentForm.find("input.not_change").prop("readonly", false);
                StudentForm.find("select.not_change").prop("disabled", false);
        }

        function GetStudentMemberHtml(studentCode, fullname, phonenumber, email, role, roleText, classname, trainingProgram, department, major) {
            const index = $("#student_list tbody tr").length;

            return `<tr class="align-bottom">
                                <td class="pe-1">
                                    <input class="no_style" readonly name='Students[${index}].StudentCode' type="text" value='${studentCode}' />
                                </td>
                                <td class="px-1">
                                     <input class="no_style" readonly type="text" name='Students[${index}].FullName' value='${fullname}' />
                                </td>
                                <td class="px-1">
                                    <input class="no_style" readonly type="text" name='Students[${index}].PhoneNumber' value='${phonenumber}' />
                                </td>
                                <td class="px-1">
                                     <input class="no_style" readonly type="text" name='Students[${index}].Email' value='${email}' />
                                </td>
                                <td class="px-1">
                                     <input hidden name='Students[${index}].RoleId' type="number" value='${role}' />
                                     <input class="no_style" readonly name="roleText" type="text" value='${roleText}' />
                                </td>
                                <td class="px-1">
                                     <input class="no_style" readonly name='Students[${index}].ClassName' type="text" value='${classname}' />
                                </td>
                                <td class="ps-1">
                                    <button tooltip="Xóa" type="button" class="p-0 delete_btn">
                                        <img src="/images/error.png" height="35" />
                                    </button>
                                    <input name='Students[${index}].TrainingProgramId' type="number" value='${trainingProgram}' hidden />
                                    <input name='Students[${index}].DepartmentId' type="number" value='${department}' hidden />
                                    <input name='Students[${index}].MajorId' type="number" value='${major}' hidden />
                                </td>
                            </tr>`;
        }

        function ShowConfirmModal(message) {
            return new Promise((resolve) => {
                const Modal = $("#confirm_modal");
                const Message = Modal.find("#message");

                Message.text(message);
                Modal.modal("show");

                Modal.find("#ConfirmBtn").off("click").click(() => {
                    Modal.modal("hide");
                    resolve(true);
                })

                Modal.off("hidden.bs.modal").on("hidden.bs.modal", function(){
                    resolve(false);
                })
            })
        }
        
        $("#mainTable .delete_btn").click(async function() {
            var self = this;
            var confirm = await ShowConfirmModal("Bạn có chắc muốn xóa thông tin đề tài này?");
            if (!confirm) { return; }

            $("#page-loader").css("display", "flex");
            $.ajax({
                url: '@Url.Action("Delete", "Topic")',
                type: "POST",
                data: {
                    id: $(this).closest("tr").data("content")
                }
            }).then((response) => {
                $("#page-loader").css("display", "none");
                if (response.code == 0) {
                    self.closest("tr").remove();
                }else{
                    $(".modal#error_modal").find("#message").text(response.message)
                    $(".modal#error_modal").modal("show");
                }
            }).catch((errors) => {
                $("#page-loader").css("display", "none");
            })
        })

        $("#mainTable .edit_btn").click(async function() {
            var self = this;

            $("#page-loader").css("display", "flex");
            $.ajax({
                url: '@Url.Action("GetRegisteredTopic", "Topic")',
                type: "POST",
                data: {
                    id: $(this).closest("tr").data("content")
                }
            }).then((response) => {
                console.log(response);
                $("#page-loader").css("display", "none");
                if (response.code == 0) {
                    SetupEditTopic(response.data);
                } else {
                    $(".modal#error_modal").find("#message").text(response.message)
                    $(".modal#error_modal").modal("show");
                }
            }).catch((errors) => {
                $("#page-loader").css("display", "none");
            })
        })

        function resetModal(){
            const modal = MainForm.closest(".modal");
            modal.find(".modal-title").text("Đăng ký đề tài");
            modal.find(".save_btn").text("Đăng ký");
            modal.find("form").each(function() {
                this.reset();
                $(this).validate().resetForm();
            })
            $("#student_list tbody tr").remove();
        }

        $("#datatable_form #btn_add").click(() => {
            resetModal();

        });

        function SetupEditTopic(data){
            resetModal();
            MainForm.closest(".modal").find(".modal-title").text("Chỉnh sửa thông tin đăng ký đề tài");
            MainForm.closest(".modal").find(".save_btn").text("Cập nhật");
            MainForm.find("input[name='Id']").val(data.encyptedID);
            MainForm.find("input[name='Title']").val(data.title);
            MainForm.find("input[name='Note']").val(data.note);
            MainForm.find("input[name='secondTeacherSearch']").val(data.secondteacherAccount?.email||"");
            MainForm.find("input[name='teacherName']").val(data.secondteacherAccount?.fullname||"");
            MainForm.find("input[name='SecondTeacherId']").val(data.secondteacherAccount?.id||0);

            const table = $("#student_list tbody");
            Array.from(data.studentList).forEach((topicStudent) => {
                let row = GetStudentMemberHtml(
                    topicStudent.studentcode,
                    topicStudent.studentcodeNavigation.fullname,
                    topicStudent.studentcodeNavigation.phonenumber,
                    topicStudent.studentcodeNavigation.email,
                    topicStudent.role ? 1 : 0,
                    topicStudent.role == 1 ? "Trưởng nhóm" : "Thành viên",
                    topicStudent.studentcodeNavigation.classname,
                    topicStudent.studentcodeNavigation.trainingprogramid,
                    topicStudent.studentcodeNavigation.departmentid,
                    topicStudent.studentcodeNavigation.majorid
                );
                table.append(row);
            })

            MainForm.closest(".modal").modal("show");
        }

        $("#datatable_form #btn_export").click(GetStudentTopicRegisterdList);

        function GetStudentTopicRegisterdList(){
            $.ajax({
                url: '@Url.Action("GetRegisterdTopicList", "Topic")',
                type: "GET",
                xhrFields: {
                    responseType: 'blob' // Important for binary data
                }
            }).then((response) => {
                const url = window.URL.createObjectURL(response);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'Danh sách sinh viên đăng ký đề tài.docx'; // Set desired file name
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url); // Clean up
            })
            .catch((error) => {
                $(".modal#error_modal").find("#message").text("Hệ thống lỗi, vui lòng thử lại sau");
                $(".modal#error_modal").modal("show");
            });
        }
    </script>
}