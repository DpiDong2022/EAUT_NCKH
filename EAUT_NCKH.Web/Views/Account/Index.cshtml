@using EAUT_NCKH.Web.Enums
@model AccountIndexViewPage

@{
    ViewData["Title"] = "Quản lý Tài khoản";
    int index = Model.Pagination.GetStartRow();
    var roleList = ViewBag.Roles as List<Role> ?? new List<Role>();
    var departments = ViewBag.Departments as List<Department> ?? new List<Department>();
    var trainingPrograms = ViewBag.TrainingPrograms as List<Trainingprogram> ?? new List<Trainingprogram>();
    var majors = ViewBag.Majors as List<Major> ?? new List<Major>();
}

<div class="p-3 h-100 overflow-auto">
    <div class="bg-white rounded-4 p-3">
        <div class="d-flex justify-content-between align-items-end flex-nowrap">
            <h5 class="text-uppercase mb-0">Quản lý Tài khoản</h5>
            <div class="d-flex gap-3 flex-nowrap">
            </div>
        </div>
        <hr />
        <form asp-action="Index" method="post" class="d-flex flex-column align-items-between flex-nowrap gap-3">
            @Html.AntiForgeryToken()

            <div class="page_filter d-flex justify-content-between align-items-end flex-nowrap gap-3 mb-4">
                <div class="d-flex gap-3 flex-nowrap">
                    <select style="width: 200px!important; min-width: 200px!important;" class="form-select rounded-pill" name="RoleId">
                        <option value="0">-------- Chọn role</option>
                        @foreach (var role in roleList) {
                            if (role.Id == Model.Pagination.RoleId) {
                                <option value="@role.Id" selected>@role.Name</option>
                            } else {
                                <option value="@role.Id">@role.Name</option>
                            }
                        }
                    </select>
                    <select style="width: 200px!important; min-width: 200px!important;" class="form-select rounded-pill" name="DepartmentId">
                        <option value="0">-------- Chọn Khoa</option>
                        @foreach (var depart in departments) {
                            if (depart.Id == Model.Pagination.DepartmentId) {
                                <option value="@depart.Id" selected>@depart.Name</option>
                            } else {
                                <option value="@depart.Id">@depart.Name</option>
                            }
                        }
                    </select>
                    <input type="text" class="search" value="@(Model.Pagination.Search)" name="Search" autocomplete="off" autofocus data-bs-toggle="tooltip" title="Tìm kiếm bằng họ tên, email, số điện thoại" placeholder="Nhập từ khóa tìm kiếm ..." />
                    <button type="submit" class="btn_primary text-nowrap">Tìm kiếm</button>
                </div>
                <div class="d-flex gap-3 flex-nowrap">
                    <button data-bs-toggle="modal" data-bs-target="#account_index_modal" id="btn_add" type="button" class="btn_primary text-nowrap">Thêm Tài khoản</button>
                </div>
            </div>

            <div class="page_length d-flex justify-content-between align-items-end flex-nowrap gap-3">
                <select class="form-select rounded-pill page_len_select" name="PageLength">
                    @if (Model.Pagination.PageLength == 10) {
                        <option value="10" selected>--- Chiều dài bảng</option>
                        <option value="10" selected>10</option>
                    } else {
                        <option value="10">10</option>
                    }
                    @if (Model.Pagination.PageLength == 20) {
                        <option value="20" selected>20</option>
                    } else {
                        <option value="20">20</option>
                    }
                    @if (Model.Pagination.PageLength == 50) {
                        <option value="50" selected>50</option>
                    } else {
                        <option value="50">50</option>
                    }
                    @if (Model.Pagination.PageLength == Model.Pagination.TotalRow) {
                        <option value="@Model.Pagination.TotalRow" selected>Tất cả</option>
                    } else {
                        <option value="@Model.Pagination.TotalRow">Tất cả</option>
                    }
                </select>
                <p class="me-auto mt-auto mb-0 text-success">Kết quả tìm kiếm: @Model.Pagination.TotalRow</p>
            </div>
            
            <input value="@(Model.Pagination.PageNumber)" name="PageNumber" type="number" hidden />

            <table id="accountTable" class="table table-hover table-responsive table-borderless mb-0">
                <thead>
                    <tr class="align-middle">
                        <th>#</th>
                        <th>Tên</th>
                        <th>Email</th>
                        <th>Số điện thoại</th>
                        <th>Khoa</th>
                        <th>Chức vụ</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var type in Model.Accounts) {
                        <tr class="align-middle" data-content="@type.Id" data-roleid="@type.Roleid" >
                            <td class="p-2">@(++index)</td>
                            <td class="p-2">@type.Fullname</td>
                            <td class="p-2">@type.Email</td>
                            <td class="p-2">@type.Phonenumber</td>
                            <td class="p-2">@(type.Department?.Name)</td>
                            <td class="p-2">@type.Role.Name</td>
                            <td><button type="button" class="edit_btn">Sửa</button></td>
                        </tr>
                    }
                </tbody>
            </table>
            <nav>
                @{
                    int totalPage = Model.Pagination.GetTotalPage();
                    Model.CalculatePagination();
                }
                <ul class="pagination">
                    <li role="button" class="page-item page-first @(Model.Pagination.PageNumber <= 1 ? "disabled" : "")">
                        <a class="page-link" href="#">&laquo;&laquo;</a>
                    </li>
                    <li role="button" class="page-item page-left @(Model.Pagination.PageNumber <= 1 ? "disabled" : "")">
                        <a class="page-link" href="#">&laquo;</a>
                    </li>

                    @if(Model.Start > Model.Range-2){
                        <li class="page-item"><span class="page-link h-100 text-black">...</span></li>
                    }

                    @for (int i = Model.Start; i <= Model.End; i++) {
                        <li role="button" class="page-item item @(Model.Pagination.PageNumber == i ? "active" : "")">
                            <a class="page-link" href="#">@i</a>
                        </li>
                    }

                    @if (Model.End < totalPage) {
                        <li class="page-item"><span class="page-link h-100 text-black">...</span></li>
                    }

                    <li role="button" class="page-item page-right @(Model.Pagination.PageNumber == totalPage ? "disabled" : "")">
                        <a class="page-link" href="#">&raquo;</a>
                    </li>
                    <li role="button" data-number="@totalPage" class="page-item page-last @(Model.Pagination.PageNumber == totalPage ? "disabled" : "")">
                        <a class="page-link" href="#">&raquo;&raquo;</a>
                    </li>
                </ul>
            </nav>
        </form>
    </div>
</div>

<div class="modal fade no_reset" id="account_index_modal" tabindex="-1" aria-labelledby="">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
        <div class="modal-content rounded-5">
            <div class="modal-header">
                <h4 class="modal-title" id="">Tạo tài khoản</h4>
            </div>
            <div class="modal-body">
                <form>
                @Html.AntiForgeryToken()
                <input type="number" name="id" value="0" hidden />
                    <div class="row" id="row1">
                        <div class="col col-6 form-group">
                            <label class="required">Vai trò trong hệ thống</label>
                            <select class="form-select" name="roleid">
                                @foreach (var role in roleList) {
                                    if (role.Id == (int)RoleEnumId.RESEARCH_ADVISOR) {
                                        <option selected value="@role.Id">@role.Name</option>
                                        continue;
                                    }
                                    <option value="@role.Id">@role.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col col-6 form-group">
                            <label class="required">Họ và tên</label>
                            <input type="text" name="fullName" placeholder="Nhập họ và tên" />
                        </div>
                    </div>
                    <div class="row" id="row2">
                        <div class="col col-6 form-group">
                            <label class="required">Email</label>
                            <input type="text" name="email" placeholder="Nhập địa chỉ email" />
                        </div>
                        <div class="col col-6 form-group">
                            <label class="required">Số điện thoại</label>
                            <input type="text" name="phoneNumber" placeholder="Nhập số điện thoại" />
                        </div>
                    </div>
                    <div class="row" id="row3">
                        <div class="col col-6 form-group d-none" id="program_container">
                            <label class="required">Hệ đào tạo</label>
                            <select class="form-select" name="trainingProgram">
                                <option selected value="-1">---- Chọn Hệ đào tạo</option>
                                @foreach (var tp in trainingPrograms) {
                                    <option data-code="@tp.Code" value="@tp.Id">@tp.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col col-6 form-group" id="department_container">
                            <label class="required">Khoa / Viện</label>
                            <select class="form-select" name="departmentId">
                                <option value="-1">---- Chọn Khoa / Viện</option>
                                @foreach (var depart in departments) {
                                    <option value="@depart.Id">@depart.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col col-6 form-group" id="major_container">
                            <label class="required">Chuyên ngành giảng dạy</label>
                            <select class="form-select" name="majorId" disabled>
                                <option value="-1">---- Chọn Chuyên ngành</option>
                                @foreach (var major in majors) {
                                    <option data-code="@major.Code" data-departmentid="@major.Departmentid" value="@major.Id">@major.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col col-6 form-group d-none" id="className_container">
                            <label class="required">Tên lớp</label>
                            <input type="text" name="className" placeholder="Nhập tên lớp" />
                        </div>
                    </div>
                    <div class="row" id="row4">
                        <div class="col col-6 form-group" id="academicTitle_container">
                            <label class="required">Học vị</label>
                            <select class="form-select" name="academicTitle">
                                <option value="-1" selected>---- Chọn Học vị</option>
                                <option value="Thạc sĩ">Thạc sĩ</option>
                                <option value="Tiến sĩ">Tiến sĩ</option>
                                <option value="Phó giáo sư">Phó giáo sư</option>
                                <option value="Giáo sư">Giáo sư</option>
                            </select>
                        </div>
                    </div>
                    <div class="row" id="row5">
                        <div class="col col-6 form-group d-none" id="studentCode_container">
                            <label class="required">Mã sinh viên</label>
                            <input name="studentCode" type="text" placeholder="Nhập mã sinh viên" />
                        </div>
                        
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="close_btn" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="save_btn">Lưu thông tin</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script type="text/javascript">
        let IsResetModal = true;
        const text = {
            accountModalId: "account_index_modal",
            departInputContainerId: "department_container",
            majorInputContainerId: "major_container",
            academicTitleInputContainerId: "academicTitle_container",
            studentCodeInputContainerId: "studentCode_container",
            classNameInputContainerId: "className_container",
            programInputContainerId: "program_container"

        };

        function RemoveValidate(){
            const form = $(`#${text.accountModalId} form`);
            if (form.data('validator')) {
                form.removeData('validator');
            }
            form.validate().resetForm();
            form.find(".error").removeClass("error");
        }

        $(`#${text.accountModalId} form`).on("change", "select[name='roleid']", function() {

            RemoveValidate();
            ResetAccountForm();

            const id = $(this).val();
            if(id == 2){
                $("#row4 .form-group").addClass("d-none");
                $("#row5 .form-group").addClass("d-none");
                $(`#${text.majorInputContainerId}`).addClass("d-none");
                $(`#${text.programInputContainerId}`).addClass("d-none");
                $(`#${text.classNameInputContainerId}`).addClass("d-none");
                ValidateDepartmentStuff()
            }
            else if(id == 3){
                ValidateTeacher();
            }
            else if(id == 4){
                $("#row3 .form-group").removeClass("d-none");
                $("#row4 .form-group").removeClass("d-none");
                $("#row5 .form-group").removeClass("d-none");
                $(`#${text.academicTitleInputContainerId}`).addClass("d-none");
                $(`#${text.majorInputContainerId} label`).text("Chuyên ngành");
                ValidateStudent()
            }
            $(`#${text.accountModalId} #${text.departInputContainerId} select`).val(-1).trigger("change");
        })

        $(`#${text.accountModalId}`).on("hidden.bs.modal", function() {
            if(!IsResetModal){
                return;
            }
            ResetAccountForm();
            RemoveValidate()
            $(`#${text.accountModalId} select[name='roleid']`).val(3);
        })

        function ResetAccountForm(){

            $("#row4 .form-group").removeClass("d-none");
            $(`#${ text.majorInputContainerId }`).removeClass("d-none");
            $(`#${ text.programInputContainerId }`).addClass("d-none");
            $(`#${ text.classNameInputContainerId }`).addClass("d-none");
            $(`#${ text.studentCodeInputContainerId }`).addClass("d-none");
            $(`#${ text.majorInputContainerId } label`).text("Chuyên ngành giảng dạy");

            $(`#${text.accountModalId} input`).val("");
            $(`#${text.accountModalId} select[name!='roleid']`).val(-1);
        }

        $(`#${text.accountModalId} #${text.departInputContainerId} select`).change(function () {
            const select = $(this);
            const selectValue = select.val();
            const majorSelect = $(`#${text.majorInputContainerId} select`);
            majorSelect.val(-1);
            RendClassName();

            if (selectValue == -1) {
                majorSelect.attr("disabled", true);
                return;
            }
            majorSelect.attr("disabled", false);
            majorSelect.find("option[value!='-1']").each(function() {
                const option = $(this);
                if (option.data("departmentid") == selectValue) {
                    option.removeClass("d-none");
                }
                else{
                    option.addClass("d-none");
                }
            })
        })

        $(`#${text.accountModalId} #${text.programInputContainerId} select`).change(function () {
            RendClassName();
        });
        $(`#${text.accountModalId} #${text.majorInputContainerId} select`).change(function () {
            RendClassName();
        });

        function RendClassName(){
            const role = $(`#${text.accountModalId} select[name='roleid']`);
            if (role.val() != 4) {
                return;
            }
            const classNameInput = $(`#${text.classNameInputContainerId} input`);
            let className = "";
            const select = $(`#${text.accountModalId} #${text.programInputContainerId} select`);
            if (!select.val() || select.val() == -1) {
                classNameInput.val("");
                return;
            }
            const programCode = select.find("option:selected").data("code");
            className += programCode + ".";
            classNameInput.val(className);

            const majorSelect = $(`#${text.accountModalId} #${text.majorInputContainerId} select`);
            if (majorSelect.val() == -1) {
                return;
            }
            const majorCode = majorSelect.find("option:selected").data("code");
            className += majorCode + ".";
            classNameInput.val(className);
        }
        
        $(`#${text.accountModalId} #${text.studentCodeInputContainerId} input`).on("input", function(){
            let value = $(this).val();
            let onlyNumbers = value.replace(/\D/g, '');
            $(this).val(onlyNumbers);
        })

        $(`#${text.accountModalId} .save_btn`).click(function() {
            const role = $(`#${text.accountModalId} select[name='roleid']`)
            const isValid = $(`#${text.accountModalId} form`).valid();
            if(!isValid){
                return;
            }
            switch(role.val()) {
                case "2":
                    SubmitToNCKH();
                    break;
                case "3":
                    SubmitTeacher();
                    break;
                case "4":
                    SubmitStudent();
                    break;
            }
        })

        function ValidateStudent() {
            const form = $(`#${text.accountModalId} form`);
            if (form.data('validator')) {
                form.removeData('validator');
            }
            form.validate({
                rules: {
                    fullName: {
                        required: true,
                        fullName: true
                    },
                    phoneNumber: {
                        required: true,
                        vietNamPhone: true
                    },
                    email: {
                        required: true,
                        email: true
                    },
                    trainingProgram: {
                        notEqual: "-1"  
                    },
                    departmentId: {
                        notEqual: "-1"
                    },
                    majorId: {
                        notEqual: "-1"
                    },
                    studentCode: {
                        required: true
                    },
                    className: {
                        required: true
                    }
                },
                messages: {
                    fullName: {
                        required: "Họ và tên không được để trống"
                    },
                    phoneNumber: {
                        required: "Số điện thoại không được để trống"
                    },
                    email: {
                        required: "Địa chỉ email không được để trống",
                        email: "Email không đúng định dạng"
                    },
                    trainingProgram: {
                        notEqual: "Chương trình đào tạo không được để trống"
                    },
                    departmentId: {
                        notEqual: "Khoa / Viện không được để trống"
                    },
                    majorId: {
                        notEqual: "Chuyên ngành không được để trống"
                    },
                    studentCode: {
                        required: "Mã sinh viên không được để trống"
                    },
                    className: {
                        required: "Tên lớp không được để trống"
                    }
                },
                submitHandler: function (form) {
                    alert("sinh vien submit")
                }
            })
            // const isValid = $(`#${text.accountModalId} form`).valid();
            // if (isValid) {
            //     console.log("sinh vien ok")
            // }
        }
        ValidateTeacher()
        function ValidateTeacher() {
            const form = $(`#${text.accountModalId} form`);
            if (form.data('validator')) {
                form.removeData('validator');
                form.removeData('unobtrusiveValidation');
            }
            form.validate({
                 rules:{
                     fullName: {
                         required: true,
                        fullName: true
                     },
                     phoneNumber:{
                         required: true,
                         vietNamPhone: true
                     },
                     email:{
                         required: true,
                         email: true
                     },
                     departmentId: {
                         notEqual: "-1"
                     },
                     majorId: {
                        notEqual: "-1"
                     },
                    academicTitle: {
                        notEqual: "-1"
                    }
                 },
                 messages:{
                    fullName: {
                        required: "Họ và tên không được để trống"
                    },
                    phoneNumber: {
                        required: "Số điện thoại không được để trống"
                    },
                    email: {
                        required: "Địa chỉ email không được để trống",
                        email: "Email không đúng định dạng"
                    },
                    departmentId: {
                        notEqual: "Khoa / Viện không được để trống"
                    },
                    majorId: {
                        notEqual: "Chuyên ngành không được để trống"
                    },
                    academicTitle: {
                        notEqual: "Học vị không được để trống"
                    }
                 }, 
                 submitHandler: function(form){
                     alert("giang vien submit")
                 }
            })
             // const isValid = $(`#${text.accountModalId} form`).valid();
             // if(isValid){
             //     console.log("giang vien ok")
             // }
        }

        function ValidateDepartmentStuff() {
            const form = $(`#${text.accountModalId} form`);
            if (form.data('validator')) {
                form.removeData('validator');
                form.removeData('unobtrusiveValidation');
            }
            form.validate({
                rules: {
                    fullName: {
                        required: true,
                        fullName: true
                    },
                    phoneNumber: {
                        required: true,
                        vietNamPhone: true
                    },
                    email: {
                        required: true,
                        email: true
                    },
                    departmentId: {
                        notEqual: "-1"
                    }
                },
                messages: {
                    fullName: {
                        required: "Họ và tên không được để trống"
                    },
                    phoneNumber: {
                        required: "Số điện thoại không được để trống"
                    },
                    email: {
                        required: "Địa chỉ email không được để trống",
                        email: "Email không đúng định dạng"
                    },
                    departmentId: {
                        notEqual: "Khoa / Viện không được để trống"
                    }
                },
                submitHandler: function (form) {
                    alert("to nghien cuu khoa hoc submit")
                }
            })
            // const isValid = $(`#${text.accountModalId} form`).valid();
            // if (isValid) {
            //     console.log("to nghien cuu khoa hoc ok")
            // }
        }

        function FormCheckGeneral(){
            const form = $(`#${text.accountModalId} form`);
            const hoten = form.find("input[name='fullName']");
            const email = form.find("input[name='email']");
            const sdt = form.find("input[name='phoneNumber']");
            const depart = form.find("select[name='departmentId']");
            const major = form.find("select[name='majorId']");
            const academicTitle = form.find("select[name='academicTitle']");
        }

        $(`#${text.accountModalId}`).on("shown.bs.modal", function () {
            ValidateTeacher();
        })

        function SubmitStudent(){
             $("#page-loader").css("display", "flex");
            const token = $('input[name="__RequestVerificationToken"]').val();
            const form = $(`#${text.accountModalId} form`);
            const ID = form.find("input[name='id']").val();
            $.ajax({
                url: '@Url.Action("Student", "Account")',
                type: "POST",
                data: {
                    id: ID,
                    roleId: form.find("select[name='roleid']").val(),
                    fullName: form.find("input[name='fullName']").val(),
                    email: form.find("input[name='email']").val(),
                    phoneNumber: form.find("input[name='phoneNumber']").val(),
                    trainingProgram: form.find("select[name='trainingProgram']").val(),
                    departmentId: form.find("select[name='departmentId']").val(),
                    majorId: form.find("select[name='majorId']").val(),
                    studentCode: form.find("input[name='studentCode']").val(),
                    className: form.find("input[name='className']").val(),
                },
                headers: {
                    RequestVerificationToken: token
                }
            }).then((response) => {
                $("#page-loader").css("display", "none");

                if (response.code === 0) {
                    IsResetModal = true;
                    $(".modal#success_modal").find("#message").text(response.message);
                    $(".modal#success_modal").modal("show");

                    if (ID > 0) {
                        setTimeout(() => {
                            location.reload();
                        }, 900);
                    } else {
                        RendNewRowAccount(response.data.id);
                    }
                }
                else {
                    IsResetModal = false;
                    $(".modal#error_modal").find("#message").text(response.message);
                    $(".modal#error_modal").modal("show");
                }
            });
        }

        function SubmitTeacher() {
             $("#page-loader").css("display", "flex");
            const token = $('input[name="__RequestVerificationToken"]').val();
            const form = $(`#${text.accountModalId} form`);
            const ID = form.find("input[name='id']").val();
            $.ajax({
                url: '@Url.Action("Teacher", "Account")',
                type: "POST",
                data: {
                    id: ID,
                    roleId: form.find("select[name='roleid']").val(),
                    fullName: form.find("input[name='fullName']").val(),
                    email: form.find("input[name='email']").val(),
                    phoneNumber: form.find("input[name='phoneNumber']").val(),
                    departmentId: form.find("select[name='departmentId']").val(),
                    majorId: form.find("select[name='majorId']").val(),
                    academicTitle: form.find("select[name='academicTitle']").val()
                },
                headers:{
                    RequestVerificationToken: token
                }
            }).then((response) => {
                console.log(response)
                $("#page-loader").css("display", "none");

                if (response.code === 0) {
                    IsResetModal = true;
                    $(".modal#success_modal").find("#message").text(response.message);
                    $(".modal#success_modal").modal("show");

                    if (ID > 0) {
                        setTimeout(() => {
                            location.reload();
                        }, 900);
                    }else{
                        RendNewRowAccount(response.data.id);
                    }
                }
                else {
                    IsResetModal = false;
                    $(".modal#error_modal").find("#message").text(response.message);
                    $(".modal#error_modal").modal("show");
                }
            });
        }

        function SubmitToNCKH(){
             $("#page-loader").css("display", "flex");
            const token = $('input[name="__RequestVerificationToken"]').val();
            const form = $(`#${text.accountModalId} form`);
            const ID = form.find("input[name='id']").val();
            $.ajax({
                url: '@Url.Action("ToNCKH", "Account")',
                type: "POST",
                data: {
                    id: ID,
                    roleId: form.find("select[name='roleid']").val(),
                    fullName: form.find("input[name='fullName']").val(),
                    email: form.find("input[name='email']").val(),
                    phoneNumber: form.find("input[name='phoneNumber']").val(),
                    departmentId: form.find("select[name='departmentId']").val()
                },
                headers:{
                    RequestVerificationToken: token
                }
            }).then((response) => {
                console.log(response)
                $("#page-loader").css("display", "none");

                if (response.code === 0) {
                    IsResetModal = true;
                    $(".modal#success_modal").find("#message").text(response.message);
                    $(".modal#success_modal").modal("show");
                    if (ID > 0) {
                        setTimeout(() => {
                            location.reload();
                        }, 900);
                    }
                    else{
                        RendNewRowAccount(response.data);
                    }
                }
                else {
                    IsResetModal = false;
                    $(".modal#error_modal").find("#message").text(response.message);
                    $(".modal#error_modal").modal("show");
                }
            });
        }

        $(".modal#error_modal").on("hide.bs.modal", () => {IsResetModal=true})

        function ReSetAccountFormInput(){
        }

        function RendNewRowAccount(accountId){
            const form = $(`#${text.accountModalId} form`);
            const roleId = form.find("select[name='roleid']").val();
            const tr = `<tr class="align-middle" data-content='${accountId}' data-roleid='${roleId}' >
                                            <td class="p-2"><span class="text-success">New</span></td>
                                            <td class="p-2">${form.find("input[name='fullName']").val()}</td>
                                            <td class="p-2">${form.find("input[name='email']").val()}</td>
                                            <td class="p-2">${form.find("input[name='phoneNumber']").val()}</td>
                                            <td class="p-2">${form.find("select[name='roleid'] option:selected").text()}</td>
                                            <td class="p-2">${form.find("select[name='departmentId'] option:selected").text()}</td>
                                            <td><button type="button" class='edit_btn ${roleId == 4 ? "d-none":""}'>Sửa</button></td>
                                        </tr>`;
            const table = $("#accountTable tbody").prepend(tr);
        }

        $("table#accountTable .edit_btn").click(async function(){
            const response = await GetAccountInfor($(this).closest("tr").data("content"));
            console.log(response);
            if(!response || response.code != 0){
                return;
            }
            OpenEditAccountModal(response.data);
        });

        async function GetAccountInfor(idd){
            $("#page-loader").css("display", "flex");
               const response = await $.ajax({
                                url: '@Url.Action("GetAccountInformation", "Account")',
                                type: "GET",
                                data: {id:idd}
            });

            $("#page-loader").css("display", "none");
            if (response.code === 0) {
                return response;
            }
            else {
                $(".modal#error_modal").find("#message").text(response.message);
                $(".modal#error_modal").modal("show");

                return false;
            }
        }

        function OpenEditAccountModal(data){
            $(`#${text.accountModalId} .modal-title`).text("Cập nhật tài khoản");
            const form = $(`#${text.accountModalId} form`);
            form.find("input").attr("disabled", true);
            form.find("select").attr("disabled", true);

            form.find("input[name='fullName']").attr("disabled", false);
            form.find("input[name='email']").attr("disabled", false);

            form.find("select[name='roleid']").val(data.roleId).trigger("change");
            form.find("input[name='fullName']").val(data.fullName);
            form.find("input[name='email']").val(data.email);
            form.find("input[name='phoneNumber']").val(data.phoneNumber);
            form.find("select[name='departmentId']").val(data.departmentId);
            form.find("input[name='id']").val(data.id);

            if(data.roleId == 3){
                form.find("select[name='academicTitle']").attr("disabled", false);
                form.find("select[name='majorId']").val(data.majorId ? data.majorId : -1);
                form.find("select[name='academicTitle']").val(data.academicTitle ? data.academicTitle : -1);
            }
            else if(data.roleId == 4 ){
                form.find("input[name='className']").val(data.className);
                form.find("input[name='studentCode']").val(data.studentCode);
                form.find("select[name='majorId']").val(data.majorId ? data.majorId : -1);
                form.find("select[name='trainingProgram']").val(data.trainingProgram ? data.trainingProgram : -1);
            }
            $(`#${text.accountModalId}`).modal("show");
        }

        $("#btn_add").click(function(){
            const form = $(`#${text.accountModalId} form`);
            form.find("input").attr("disabled", false);
            form.find("select").attr("disabled", false);
            $(`#${text.accountModalId} .modal-title`).text("Thêm mới tài khoản");
        })
        </script>
}